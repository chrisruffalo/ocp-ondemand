---
# get information about nats
- name: "Get NAT gateway information"
  extras_ec2_vpc_nat_gateway_facts:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
  when: vpc_id is defined
  register: vpc_nat_facts

# delete options
- name: "Delete NAT gateways"
  ec2_vpc_nat_gateway:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    state: absent
    nat_gateway_id: "{{ vpc_nat_facts.result[0].NatGatewayId }}"
    wait: true
  when: vpc_nat_facts.result is defined and vpc_nat_facts.result[0] is defined and vpc_nat_facts.result[0].VpcId is defined

# delete EIP for NAT
# do we already have a EIP registered?
- name: "Check on already registered EIP"
  stat:
    path: "./static/{{ safe_instance_name }}/eip.yml"
  register: eip_memory_file

# if so then load the vars
- name: "Read the EIP value used by the NAT when created"
  include_vars: 
    file: "./static/{{ safe_instance_name }}/eip.yml"
    name: "nat_eip"
  when: eip_memory_file.stat.exists

# create elastic ip so we can control relase
- name: "Delete elastic IP used for NAT gateway"
  ec2_eip:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    state: absent
    public_ip: "{{ nat_eip.public_ip }}"
  failed_when: false # just ignore errors
  when: eip_memory_file.stat.exists
  register: nat_eip_delete

# remove EIP memory file
- name: "Remove EIP memory file"
  file:
    path: "./static/eip.yml"
    state: absent

# wait
- name: "Wait for EIP to be deleted so IGW can be deleted"
  pause:
    seconds: 30
  when: nat_eip_delete.changed

- name: "Gather facts about all Internet Gateways for region"
  ec2_vpc_igw_facts:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
  register: igw_facts

# create elastic ip so we can control relase
- name: "Disocciate elastic IP used for IGW"
  ec2_eip:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    state: absent
    device_id: "{{ item.internet_gateway_id }}"
  when: item.attachments[0].vpc_id == vpc_id
  with_items: "{{ igw_facts.internet_gateways }}"

# remove internet gateway
- name: "Remove IGW"
  ec2_vpc_igw:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ vpc_id }}"
    state: absent

# terminate subnets
- name: "Terminate instance VPC subnets"
  ec2_vpc_subnet:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    state: absent
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ item.cidr_block }}"
  when: vpc_net_facts.vpcs
  with_items: "{{ vpc_subnet_facts.subnets }}"
  register: subnet_delete_results

- name: "Pause and wait for subnets to be fully removed"
  pause:
    seconds: 5
  when: subnet_delete_results.changed

# get information to delete route tables (and other incidental artifacts)
- name: "Get details about existing routing tables"
  ec2_vpc_route_table_facts:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"        
    filters:
      "tag:instance": "{{ instance_name }}"
  when: vpc_net_facts.vpcs    
  register: route_table_facts    

- name: "Delete routing tables"
  ec2_vpc_route_table:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    state: absent
    lookup: id
    route_table_id: "{{ item.id }}"
    vpc_id: "{{ vpc_id }}"
  with_items: "{{ route_table_facts.route_tables }}"
  when: route_table_facts.route_tables
  register: routing_table_delete_results

- name: "Pause and wait for routing tables to drop"
  pause:
    seconds: 5
  when: routing_table_delete_results.changed

# remove security groups associated with vpc
- extras_ec2_group_facts:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
  register: vpc_sec_groups

- ec2_group:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    name: "{{ item.group_name }}"
    state: absent
    description: "{{ item.description }}"
  when: item.group_name != "default" # can't delete default group
  with_items: "{{ vpc_sec_groups.security_groups }}"

# everything is gone, terminate VPC
- name: "Terminate instance VPC"
  ec2_vpc_net:
    access_key: "{{ aws_access_key }}"
    secret_key: "{{ aws_secret_key }}"
    state: absent
    name: "{{ instance_name }}-vpc"
    cidr_block: 10.0.0.0/16
    region: "{{ aws_region }}"
  when: vpc_net_facts.vpcs        
