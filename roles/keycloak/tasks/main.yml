---

# make sure group/node facts are more accessible
- name: "Move collected ec2 facts from localhost to a more convienient location"
  set_fact:
    ec2_info: "{{ hostvars['localhost']['ec2_info'] }}"

# install prequisites for keycloak
- name: "Install keycloak prerequisites"
  package:
    name: 
      - "java-1.8.0-openjdk"
      - "java-1.8.0-openjdk-devel"
      - "epel-release"

- name: "Install pip after epel makes it available"
  package:
    name: 
      - "python2-pip"

- name: "Upgrade pip to latest version"
  command: "/bin/pip install --upgrade pip"
  args:
    creates: "/usr/lib/python2.7/site-packages/pip-9.0.1.dist-info"

# install wildfly/python connector
- name: "Install python library for talking to Wildfly"
  pip:
    name: "wildfly-py"

# create jboss user
- name: "Create JBoss user"
  user:
    name: "jboss"
    
# download and unzip keycloak
- name: "Get keycloak distribution"
  get_url:
    url: "{{ keycloak_download_url }}"
    dest: "/opt/{{ keycloak_dist_name }}.tar.gz"
    owner: "jboss"
    group: "jboss"

# create directory/structure for wildfly/jboss/keycloak
- name: "Create directory structure for logs"
  file:
    state: directory
    path: "/var/log/keycloak"
    owner: "jboss"
    group: "jboss"    

- name: "Unarchive keycloak distribution"
  unarchive:
    src: "/opt/{{ keycloak_dist_name }}.tar.gz"
    dest: "/opt"
    remote_src: yes
    owner: "jboss"
    group: "jboss"
    creates: "/opt/keycloak/bin/standalone.sh"

- name: "Symlink keycloak distribution to target directory"
  file:
    state: link
    src: "/opt/{{ keycloak_dist_name }}"
    dest: "/opt/keycloak"

- name: "Ensure symlink source is controlled"
  file:
    state: directory
    path: "/opt/{{ keycloak_dist_name }}"
    owner: "jboss"
    group: "jboss"

# install postgres module
- name: "Create module location for postgres module"
  file:
    state: directory
    path: "/opt/keycloak/modules/system/layers/keycloak/org/postgresql/main"
    owner: "jboss"
    group: "jboss"

- name: "Download jar into location"
  get_url:
    url: "{{ postgres_jar_download_url }}"
    dest: "/opt/keycloak/modules/system/layers/keycloak/org/postgresql/main/{{ postgres_jar_name }}"
    owner: "jboss"
    group: "jboss"

- name: "Create module definition from template"
  template:
    src: "postgres-module.xml.j2"
    dest: "/opt/keycloak/modules/system/layers/keycloak/org/postgresql/main/module.xml"
    owner: "jboss"
    group: "jboss"

# create systemctl service and copy file
- name: "Copy systemctl service unit file"
  template:
    src: "keycloak.service.j2"
    dest: "/etc/systemd/system/keycloak.service"

# enable service
- name: "Enable keycloak service"
  service:
    name: "keycloak"
    enabled: true
    daemon_reload: true

# add user for jboss admin (local / console)
- name: "Add user for jboss console / local"
  command: "/opt/keycloak/bin/add-user.sh -e -s -r ManagementRealm -u {{ keycloak_admin_user}} -p \"{{ keycloak_admin_password }}\""

# start service and wait for it to be started so that changes can be made against the API
- name: "Start Keycloak JBoss Instance because, if you don't, the commands won't work"
  service:
    name: "keycloak"
    state: started

- name: "Wait for service to be up"
  wait_for:
    port: 8080

# add a keycloak user
- name: "Add keycloak user"
  run_once: true
  command: "/opt/keycloak/bin/add-user-keycloak.sh -r master -u {{ keycloak_admin_user }} -p \"{{ keycloak_admin_password }}\""

# use kcadm to establish authentication realm for hosted domain/zone
# see: https://www.keycloak.org/docs/3.0/server_admin/topics/admin-cli.html
- name: "Authenticate keycloak admin-cli"
  run_once: true
  command: "/opt/keycloak/bin/kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user {{ keycloak_admin_user }} --password {{ keycloak_admin_password }}"

- name: "Create realm for instance"
  run_once: true
  command: "/opt/keycloak/bin/kcadm.sh create realms -s realm='{{ safe_instance_name }}' -s enabled=true"

# todo: manipulate configuration files for direct ip clustering

# open firewall ports
- name: "Open firewall ports for Keycloak"
  firewalld:
    port: "{{ item }}"
    state: enabled
    immediate: true
    permanent: true
  with_items:
    - 8080 # only http, https termination handled by ALB
