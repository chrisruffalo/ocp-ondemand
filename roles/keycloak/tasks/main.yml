---

# make sure group/node facts are more accessible
- name: "Move collected ec2 facts from localhost to a more convienient location"
  set_fact:
    ec2_info: "{{ hostvars['localhost']['ec2_info'] }}"

# install prequisites for keycloak
- name: "Install keycloak prerequisites"
  package:
    name: 
      - "java-1.8.0-openjdk"
      - "java-1.8.0-openjdk-devel"

# create jboss user
- name: "Create JBoss user"
  user:
    name: "jboss"

# create directory/structure for wildfly/jboss/keycloak
- name: "Create directory structure for jboss"
  file:
    state: directory
    path: "/opt/keycloak"
    owner: "jboss"
    group: "jboss"

# create directory/structure for wildfly/jboss/keycloak
- name: "Create directory structure for logs"
  file:
    state: directory
    path: "/var/log/keycloak"
    owner: "jboss"
    group: "jboss"    
    
# download and unzip keycloak
- name: "Get keycloak distribution"
  get_url:
    url: "{{ keycloak_download_url }}"
    dest: "/opt/keycloak-dist.tar.gz"
    owner: "jboss"
    group: "jboss"

- name: "Unarchive keycloak distribution"
  unarchive:
    src: "/opt/keycloak-dist.tar.gz"
    dest: "/opt/keycloak"
    remote_src: yes
    owner: "jboss"
    group: "jboss"
    creates: "/opt/keycloak/bin/standalone.sh"

# install postgres module
- name: "Create module location for postgres module"
  file:
    state: directory
    path: "/opt/keycloak/modules/system/layers/keycloak/org/postgresql/main"
    owner: "jboss"
    group: "jboss"

- name: "Download jar into location"
  get_url:
    url: "{{ postgres_jar_download_url }}"
    dest: "/opt/keycloak/modules/system/layers/keycloak/org/postgresql/main/{{ postgres_jar_name }}"
    owner: "jboss"
    group: "jboss"

- name: "Create module definition from template"
  template:
    src: "postgres-module.xml.j2"
    dest: "/opt/keycloak/modules/system/layers/keycloak/org/postgresql/main/module.xml"
    owner: "jboss"
    group: "jboss"

# manipulate configuration files for database (add driver, add data source)
- name: "Insert section that adds driver to standalone XML file"
  blockinfile:
    path: "/opt/keycloak/standalone/configuration/{{ configuration_xml }}"
    insertbefore: "<\/drivers>"
    content: |
      <driver name="postgresql" module="org.postgresql">
        <xa-datasource-class>org.postgresql.xa.PGXADataSource</xa-datasource-class>
      </driver>

- name: "Insert section that creates datasource"
  blockinfile:
    path: "/opt/keycloak/standalone/configuration/{{ configuration_xml }}"
    insertbefore: "<datasource.+?datasources\/KeycloakDS(.|\n)+?<\/datasource>"
    content: |
      <datasource jndi-name="java:jboss/datasources/KeycloakDS" pool-name="KeycloakDS" enabled="true" use-java-context="true">
          <connection-url></connection-url>
          <driver>jdbc:postgresql://{{ ec2_info.keycloak_db.private_ip }}/keycloak</driver>
          <pool>
            <max-pool-size>20</max-pool-size>
          </pool>
          <security>
              <user-name>keycloak</user-name>
              <password>{{ keycloak_db_password }}</password>
          </security>
      </datasource>

# add a keycloak user
- name: "Add keycloak user"
  command: "/opt/keycloak/bin/add-user-keycloak.sh -r master -u {{ keycloak_admin_user }} -p {{ keycloak_admin_password }}"

# use kcadm to establish authentication realm for hosted domain/zone
# see: https://www.keycloak.org/docs/3.0/server_admin/topics/admin-cli.html
- name: "Authenticate keycloak admin-cli"
  command: "/opt/keycloak/bin/kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user {{ keycloak_admin_user }} --password {{ keycloak_admin_password }}"

- name: "Create realm for instance"
  command: "/opt/keycloak/bin/kcadm.sh create realms -s realm='{{ safe_instance_name }}' -s enabled=true"

# todo: manipulate configuration files for direct ip clustering


# create systemctl service and copy file
- name: "Copy systemctl service unit file"
  template:
    src: "keycloak.service.j2"
    dest: "/etc/systemd/system/keycloak.service"
  notify:
    - "reload systemd"
    - "restart keycloak"

# enable service
- name: "Enable keycloak service"
  service:
    name: "keycloak"
    enabled: true

# open firewall ports
- name: "Open firewall ports for Keycloak"
  firewalld:
    port: "{{ item }}"
    state: enabled
    immediate: true
    permanent: true
  with_items:
    - 8080
    - 8443