---
# install prequisites for keycloak
- name: "Install keycloak prerequisites"
  package:
    name: 
      - "java-1.8.0-openjdk"
      - "java-1.8.0-openjdk-devel"
      - "epel-release"

- name: "Install pip after epel makes it available"
  package:
    name: 
      - "python2-pip"

- name: "Upgrade pip to latest version"
  command: "/bin/pip install --upgrade pip"
  args:
    creates: "/usr/lib/python2.7/site-packages/pip-9.0.1.dist-info"

# install wildfly/python connector
- name: "Install supporting python libraries"
  pip:
    name: 
      - "requests"
      - "psycopg2" # postgres

# create jboss user
- name: "Create JBoss user"
  user:
    name: "jboss"
    
# download and unzip keycloak
- name: "Get keycloak distribution"
  get_url:
    url: "{{ keycloak_download_url }}"
    dest: "/opt/{{ keycloak_dist_name }}.tar.gz"
    owner: "jboss"
    group: "jboss"

# create directory/structure for wildfly/jboss/keycloak
- name: "Create directory structure for logs"
  file:
    state: directory
    path: "/var/log/keycloak"
    owner: "jboss"
    group: "jboss"    

- name: "Unarchive keycloak distribution"
  unarchive:
    src: "/opt/{{ keycloak_dist_name }}.tar.gz"
    dest: "/opt"
    remote_src: yes
    owner: "jboss"
    group: "jboss"
    creates: "/opt/keycloak/bin/standalone.sh"

- name: "Symlink keycloak distribution to target directory"
  file:
    state: link
    src: "/opt/{{ keycloak_dist_name }}"
    dest: "/opt/keycloak"

- name: "Ensure symlink source is controlled"
  file:
    state: directory
    path: "/opt/{{ keycloak_dist_name }}"
    owner: "jboss"
    group: "jboss"

# install postgres module
- name: "Create module location for postgres module"
  file:
    state: directory
    path: "/opt/keycloak/modules/system/layers/keycloak/org/postgresql/main"
    owner: "jboss"
    group: "jboss"

- name: "Download postgres driver jar into location"
  get_url:
    url: "{{ postgres_jar_download_url }}"
    dest: "/opt/keycloak/modules/system/layers/keycloak/org/postgresql/main/{{ postgres_jar_name }}"
    owner: "jboss"
    group: "jboss"

- name: "Create module definition from template"
  template:
    src: "postgres-module.xml.j2"
    dest: "/opt/keycloak/modules/system/layers/keycloak/org/postgresql/main/module.xml"
    owner: "jboss"
    group: "jboss"

# create systemctl service and copy file
- name: "Copy systemctl service unit file"
  template:
    src: "keycloak.service.j2"
    dest: "/etc/systemd/system/keycloak.service"

# enable service
- name: "Enable keycloak service"
  service:
    name: "keycloak"
    enabled: true
    daemon_reload: true

# add user for jboss admin (local / console)
- name: "Add user for jboss console / local"
  command: "/opt/keycloak/bin/add-user.sh -e -s -r ManagementRealm -u {{ keycloak_admin_user}} -p \"{{ keycloak_admin_password }}\""
  become: true
  become_user: "jboss"

# ensure keycloak db is created
- postgresql_db:
    name: "keycloak"
    encoding: UTF-8
    login_host: "{{ ec2_info.keycloak_db.instance.endpoint }}"
    login_user: "keycloak"
    login_password: "{{ keycloak_db_password }}"

# start service and wait for it to be started so that changes can be made against the API
- name: "Start Keycloak JBoss Instance because, if you don't, the commands won't work"
  service:
    name: "keycloak"
    state: started
  register: keycloak_service_started

- name: "Wait for service management port to be up"
  wait_for:
    port: 9990
  when: keycloak_service_started.changed

- name: "The management interface can take a moment to come up even after the port is open"
  pause:
    seconds: 30
  when: keycloak_service_started.changed

- name: "Add Postgres driver module to Wildfly"
  wildfly_resource: 
    username: "{{ keycloak_admin_user }}"
    password: "{{ keycloak_admin_password }}"
    operation: present
    address:
      - {"subsystem": "datasources"}
      - {"jdbc-driver": "postgresql"}
    parameters:
      driver-name: "postgresql"
      driver-module-name: "org.postgresql"          
      driver-xa-datasource-class-name: "org.postgresql.xa.PGXADataSource"
  register: wildfly_jdbc_driver

- name: "Set/update Keycloak datasource to use Postgres"
  wildfly_resource:
    username: "{{ keycloak_admin_user }}"
    password: "{{ keycloak_admin_password }}"
    operation: present
    address:
      - {"subsystem": "datasources"}
      - {"data-source": "KeycloakDS"}
    parameters:
      driver-name: "postgresql"
      jndi-name: "java:jboss/datasources/KeycloakDS"
      user-name: "keycloak"
      password: "{{ keycloak_db_password }}"
      connection-url: "jdbc:postgresql://{{ ec2_info.keycloak_db.instance.endpoint }}/keycloak"
      enabled: true
      use-java-context: true
      min-pool-size: 5
      max-pool-size: 20
  register: wildfly_datasource

- name: "After the datasource is added sometimes it takes a while to create the tables and it does this before, not after, the restart (even though JBoss says it requires a restart). Restarting too soon can cause liquibase to not work."
  pause:
    seconds: 120
  when: wildfly_datasource.changed

# start service and wait for it to be started so that changes can be made against the API
- name: "Restart when required for datasources"
  service:
    name: "keycloak"
    state: restarted
  when: wildfly_jdbc_driver.changed or wildfly_datasource.changed 
  register: keycloak_restarted_after_db

- name: "Wait for service management port to be up after restart from changed data sources"
  wait_for:
    port: 9990    
  when: keycloak_restarted_after_db.changed

- name: "After the datasource is changed tables need to be created and this can take some time"
  pause:
    seconds: 120
  when: keycloak_restarted_after_db.changed  

# manipulate security and http information if required
- name: "Allow secure traffic on HTTP interface for HTTPS termination at LB/ALB"
  wildfly_attribute:
    username: "{{ keycloak_admin_user }}"
    password: "{{ keycloak_admin_password }}"
    operation: set
    address:
      - "subsystem": "undertow"
      - "server": "default-server"
      - "http-listener": "default"
    key: "secure"
    value: "true"
  register: updated_http_to_secure

- name: "Indicate that HTTP traffic has been forwarded from proxy"
  wildfly_attribute:
    username: "{{ keycloak_admin_user }}"
    password: "{{ keycloak_admin_password }}"
    operation: set
    address:
      - "subsystem": "undertow"
      - "server": "default-server"
      - "http-listener": "default"
    key: "proxy-address-forwarding"
    value: "true"
  register: updated_proxy_forwarding

# todo: manipulate configuration for direct ip clustering when more than one keycloak host is present

# start service and wait for it to be started so that changes can be made against the API
- name: "Restart when required for network configuration"
  service:
    name: "keycloak"
    state: restarted
  when: updated_http_to_secure.changed or updated_proxy_forwarding.changed
  register: keycloak_restarted_after_network_change

- name: "Wait for service management port to be up after restart from changed network configuration"
  wait_for:
    port: 9990    
  when: keycloak_restarted_after_network_change.changed

- name: "The Wildfly server should come up quickly after networking changes"
  pause:
    seconds: 30
  when: keycloak_restarted_after_network_change.changed  

# add a keycloak user (on each server)
- name: "Add keycloak user"
  command: "/opt/keycloak/bin/add-user-keycloak.sh -r master -u {{ keycloak_admin_user }} -p \"{{ keycloak_admin_password }}\""
  become: true
  become_user: "jboss"
  register: kc_add_user
  changed_when: "not \"already\" in kc_add_user.stdout and not \"already\" in kc_add_user.stderr"
  failed_when: "kc_add_user.stderr is defined and kc_add_user.stderr !=\"\" and not (\"User with username '\" + keycloak_admin_user + \"' already added\" in kc_add_user.stderr)"

# start service and wait for it to be started so that changes can be made against the API
- name: "Restart when required for new keycloak user"
  service:
    name: "keycloak"
    state: restarted
  when: kc_add_user.changed

- name: "Wait for service port to be up after restart from changed keycloak user"
  wait_for:
    port: 8080
  when: kc_add_user.changed

- name: "Wait for a few seconds to ensure interface is up and running"  
  pause:
    seconds: 30
  when: kc_add_user.changed

# now that is done, hand over to keycloak administration tasks
- include: 'keycloak_admin.yml'
  run_once: true
