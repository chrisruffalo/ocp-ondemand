---
- hosts: localhost
  connection: local
  gather_facts: false
  tasks:
  - name: "authenticate"
    uri:  
      method: POST
      url: "http://localhost:8080/auth/realms/master/protocol/openid-connect/token"
      body: "username=keycloak&password=keycloak&grant_type=password&client_id=admin-cli"
      return_content: true
    register: authenticate_response

  - name: "get realm if it exists"
    uri:
      method: GET
      url: "http://localhost:8080/auth/admin/realms/{{ safe_instance_name }}"
      headers:
        'Authorization': "{{ authenticate_response.json.token_type }} {{ authenticate_response.json.access_token }}"
      return_content: true
    register: realm_response
    failed_when: not (realm_response.status == 200 or realm_response.status == 404)

  - name: "create new realm"
    uri:
      method: POST
      url: "http://localhost:8080/auth/admin/realms"
      headers:
        'Authorization': "{{ authenticate_response.json.token_type }} {{ authenticate_response.json.access_token }}"
      body: "{'id': '{{ safe_instance_name }}', 'realm': '{{ safe_instance_name }}', 'displayName': 'OCP Realm', 'enabled': true}"
      body_format: json
      return_content: true
    changed_when: realm_creation.status == 201
    failed_when: not (realm_creation.status == 200 or realm_creation.status == 201)
    register: realm_creation
    when: "realm_response.status == 404" # when realm is not found

  - name: "get client template in realm"
    uri:
      method: GET
      url: "http://localhost:8080/auth/admin/realms/{{ safe_instance_name }}/client-templates/client_template_{{ safe_instance_name }}"
      headers:
        'Authorization': "{{ authenticate_response.json.token_type }} {{ authenticate_response.json.access_token }}"
      return_content: true
    register: client_template_response
    failed_when: not (client_template_response.status == 200 or client_template_response.status == 404)

  - name: "create client template if none is found"
    uri:
      method: POST
      url: "http://localhost:8080/auth/admin/realms/{{ safe_instance_name }}/client-templates"
      headers:
        'Authorization': "{{ authenticate_response.json.token_type }} {{ authenticate_response.json.access_token }}"
      body: "{'id': 'client_template_{{ safe_instance_name }}', 'name': 'client_template_{{ safe_instance_name }}'}"
      body_format: json
      return_content: true
    register: client_template_creation
    changed_when: client_template_creation.status == 201
    failed_when: not (client_template_creation.status == 200 or client_template_creation.status == 201)
    when: "client_template_response.status == 404" # when client template is not found

  - name: "get client in realm"
    uri:
      method: GET
      url: "http://localhost:8080/auth/admin/realms/{{ safe_instance_name }}/clients?clientId=client_{{ safe_instance_name }}"
      headers:
        'Authorization': "{{ authenticate_response.json.token_type }} {{ authenticate_response.json.access_token }}"
      return_content: true
    register: client_list_response
  
  - name: "get client by id"
    uri:
      method: GET
      url: "http://localhost:8080/auth/admin/realms/{{ safe_instance_name }}/clients/{{ client_list_response.json[0].id }}"
      headers:
        'Authorization': "{{ authenticate_response.json.token_type }} {{ authenticate_response.json.access_token }}"
      return_content: true
    register: client_response
    when: (client_list_response.json is defined) and (client_list_response.json | length > 0)

  - name: "create client if not found"
    uri:
      method: POST
      url: "http://localhost:8080/auth/admin/realms/{{ safe_instance_name }}/clients"
      headers:
        'Authorization': "{{ authenticate_response.json.token_type }} {{ authenticate_response.json.access_token }}"
      body: "{'clientId': 'client_{{ safe_instance_name }}', 'name': 'client_{{ safe_instance_name }}', 'clientTemplate': 'client_template_{{ safe_instance_name }}', 'enabled': true}"
      body_format: json
      return_content: true
    register: client_creation
    changed_when: client_creation.status == 201
    failed_when: not (client_creation.status == 200 or client_creation.status == 201)
    when: not ((client_list_response.json is defined) and (client_list_response.json | length > 0))

  - name: "Merge client information from creation and response"
    set_fact: 
      keycloak_details: "{{ client_creation.json if client_creation.json is defined and client_creation.json.id is defined else client_response.json }}"

  - name: "Get client secret for later so that it can be used for authentication"
    uri:
      method: GET
      url: "http://localhost:8080/auth/admin/realms/{{ safe_instance_name }}/clients/{{ keycloak_details.id }}/client-secret"
      headers:
        'Authorization': "{{ authenticate_response.json.token_type }} {{ authenticate_response.json.access_token }}"
      return_content: true
    register: client_secret_response # {type='secret', .value='...'}

  - name: "Set client secret for later use"
    set_fact:
      keycloak_client_secret: "{{ client_secret_response.json.value }}"

  - name: "Consolidate facts for storage"
    set_fact:
      keycloak_details: "{{ keycloak_details | combine({'secret': keycloak_client_secret}) }}"

  